[project]
name = "multiscale-beep-encoder"
version = "0.0.1"
description = "This repo implements a Multiscale Encoder for the Beep dataset, an encoder-only transformer model leveraging representation learning, for hyper-long sequence learning. We assume some form of time series data"
authors = [
    {name = "Dimitrios Christofidellis", email = "dic@zurich.ibm.com"},
    {name = "Joris Florent Schaller", email = "jorisflorent.schaller@uzh.com"}
]
readme = "README.md"
requires-python = ">=3.10,<4.0"
dependencies = [
    "tqdm>=4.25.0",
    "pre-commit>=4.0.1",
    "ruff>=0.7.4",
    "mblm>=0.4.0",
    "polars>=1.29.0",
    "transformers>=4.51.3",
    "datasets>=3.5.1",
    "pytest>=8.3.5",
    "mypy>=1.15.0",
    "click>=8.1.8",
    "pandas-stubs>=2.2.3.250308",
    "safetensors>=0.5.3",
    "mlflow>=2.22.0",
    "types-tqdm>=4.67.0.20250516",
]
[project.scripts]
preprocess = "multiscale_encoder.cli.run_preprocessor:main"
embedd = "multiscale_encoder.cli.run_inference:run_inference"
train = "multiscale_encoder.cli.run_training:train_encoder_mblm_hf"
split = "multiscale_encoder.cli.run_split:main"
# For better LSP support using pyright
[tool.pyright]
venvPath = "."
venv = ".venv"

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "DEBUG"


[tool.setuptools]
include-package-data = true

[tool.setuptools.packages]
find = { where = ["src"], include = ["multiscale_encoder"] }

[tool.setuptools.package-data]
"multiscale_encoder" = [
    "py.typed",
    "modeling/resources/train_pipeline_configuration_example.yaml"
]

[tool.uv]
[[tool.uv.index]]
name = "PyPI"
url = "https://pypi.org/simple/"
priority = "primary"

# For extras
[project.optional-dependencies]
modeling = [
    "accelerate>=0.33.0",
    "click>=8.1.7",
    "datasets>=2.19.2",
    "pydantic>=2.6.3",
    "pydantic-settings>=2.2.1",
    "torch>=2.2.2",
    "transformers>=4.41.2",
]
data_analysis = [
    "click>=8.1.7",
    "datasets>=2.19.2",
    "ibm-generative-ai>=3.0.0",
    "pandas",
    "pydantic>=2.6.3",
    "pydantic-settings>=2.2.1",
    "python-dotenv",
    "loguru>=0.7.2",
]

[dependency-groups]
dev = [
    "isort>=5.13.2",
    "jupyter>=1.0.0",
    "mypy>=1.0.0",
    "pre-commit>=4.0.1",
    "pytest>=7.2.0",
    "pytest-cov>=2.8.1",
    "ruff>=0.7.4",
    "types-setuptools>=57.4.14",
    "detect-secrets",
]

[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"


[tool.mypy]
check_untyped_defs = true

[[tool.mypy.overrides]]
module = [
    "click.*",
    "datasets.*",
    "torch.*",
    "transformers.*",
    "yaml.*",
]
ignore_missing_imports = true

[tool.ruff]
# Include also Jupyter notebooks.
extend-include = ["*.ipynb"]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 100
indent-width = 4

target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
preview = true
select = [
    "E4",
    "E7",
    "E9",
    "F",
    "W291",
    "W292",
    "W505",
    "E721",
    "I",
    "N801",
    "N802",
    "N803",
    "N804",
    "N805",
    "N806",
    "N816",
    "D101",
    "D102",
    "D103",
    "D105",
    "D106",
    "D107",
    "D300",
    "UP010",
    "UP011",
    "UP019",
    "UP032",
    "ARG",
    "PTH",
    "LOG001",
    "LOG002",
]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
[tool.ruff.lint.per-file-ignores]
"attend.py" = ["F841","ARG002","D101","D102","D107","D103","D107"]
[tool.ruff.format]
preview = true
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
